load("//third_party/com_github_robotlocomotion_drake:tools/workspace/cpplint.bzl", "cpplint")
load(
    "//tools:dreal.bzl",
    "dreal_cc_googletest",
    "dreal_cc_library",
)
load("@rules_pkg//:pkg.bzl", "pkg_tar")

package(default_visibility = ["//visibility:private"])

# ---------
# Libraries
# ---------

dreal_cc_library(
    name = "contractor",
    srcs = [
        "contractor.cc",
        "contractor_cell.cc",
        "contractor_cell.h",
        "contractor_fixpoint.cc",
        "contractor_fixpoint.h",
        "contractor_forall.h",
        "contractor_ibex_fwdbwd.cc",
        "contractor_ibex_fwdbwd.h",
        "contractor_ibex_fwdbwd_mt.cc",
        "contractor_ibex_fwdbwd_mt.h",
        "contractor_ibex_polytope.cc",
        "contractor_ibex_polytope.h",
        "contractor_ibex_polytope_mt.cc",
        "contractor_ibex_polytope_mt.h",
        "contractor_id.cc",
        "contractor_id.h",
        "contractor_integer.cc",
        "contractor_integer.h",
        "contractor_join.cc",
        "contractor_join.h",
        "contractor_seq.cc",
        "contractor_seq.h",
        "contractor_worklist_fixpoint.cc",
        "contractor_worklist_fixpoint.h",
        "generic_contractor_generator.cc",
    ],
    hdrs = [
        "contractor.h",
        "generic_contractor_generator.h",
    ],
    visibility = ["//dreal/solver:__pkg__"],
    deps = [
        ":contractor_status",
        ":counterexample_refiner",
        "//dreal/solver:config",
        "//dreal/symbolic",
        "//dreal/util:assert",
        "//dreal/util:exception",
        "//dreal/util:ibex_converter",
        "//dreal/util:interrupt",
        "//dreal/util:logging",
        "//dreal/util:math",
        "//dreal/util:nnfizer",
        "//dreal/util:optional",
        "//dreal/util:stat",
        "//third_party/com_github_progschj_threadpool:thread_pool",
        "@ibex",
    ],
)

dreal_cc_library(
    name = "counterexample_refiner",
    srcs = [
        "counterexample_refiner.cc",
    ],
    hdrs = [
        "counterexample_refiner.h",
    ],
    deps = [
        "//dreal/optimization:nlopt_optimizer",
        "//dreal/solver:filter_assertion",
        "//dreal/symbolic",
        "//dreal/util:assert",
        "//dreal/util:box",
        "//dreal/util:logging",
    ],
)

dreal_cc_library(
    name = "contractor_status",
    srcs = [
        "contractor_status.cc",
    ],
    hdrs = [
        "contractor_status.h",
    ],
    deps = [
        "//dreal/symbolic",
        "//dreal/util:assert",
        "//dreal/util:box",
        "//dreal/util:dynamic_bitset",
        "//dreal/util:stat",
        "//dreal/util:timer",
        "@ibex",
    ],
)

# -----
# Tests
# -----
dreal_cc_googletest(
    name = "contractor_test",
    deps = [
        ":contractor",
    ],
)

dreal_cc_googletest(
    name = "contractor_fixpoint_test",
    deps = [
        ":contractor",
    ],
)

dreal_cc_googletest(
    name = "contractor_ibex_fwdbwd_test",
    deps = [
        ":contractor",
        "//dreal/util:string_to_interval",
    ],
)

dreal_cc_googletest(
    name = "contractor_id_test",
    deps = [
        ":contractor",
    ],
)

dreal_cc_googletest(
    name = "contractor_integer_test",
    deps = [
        ":contractor",
    ],
)

dreal_cc_googletest(
    name = "contractor_join_test",
    deps = [
        ":contractor",
    ],
)

dreal_cc_googletest(
    name = "contractor_seq_test",
    deps = [
        ":contractor",
    ],
)

# ----------------------
# Header files to expose
# ----------------------
filegroup(
    name = "headers",
    srcs = [
        "contractor.h",
        "contractor_status.h",
    ],
    visibility = ["//:__pkg__"],
)

pkg_tar(
    name = "package_headers",
    srcs = [
        ":headers",
    ],
    extension = "tar.gz",
    package_dir = "include/dreal/contractor",
    tags = ["manual"],
    visibility = ["//:__pkg__"],
)

cpplint()

licenses(["notice"])  # Apache 2.0

exports_files(["LICENSE"])
